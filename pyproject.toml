[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "python-tabular"
version = "0.5.7"
description = "Connect to your tabular model and perform operations programmatically"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    { name = "Curtis Stallings", email = "curtisrstallings@gmail.com" },
]
keywords = [
    "analysis-services",
    "tabular-model",
    "power-bi", 
    "ssas",
    "microsoft"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Core dependencies - keeping current Windows setup for now
dependencies = [
    "pythonnet>=3.0.3",
    "clr-loader>=0.2.6", 
    "xmltodict==0.13.0",
    "pandas>=1.4.3",
    "requests>=2.28.1",
    "rich>=12.5.1"
]

# Optional dependencies for future Linux support
[project.optional-dependencies]
# Future Linux cross-platform support
linux = [
    # Will add Microsoft.AnalysisServices NuGet packages here
    # when we implement Linux support
]

# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]

# Documentation dependencies  
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
    "mkdocs-gen-files>=0.5.0",
]

# Testing dependencies
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "coverage[toml]>=7.0.0",
]

# Linting dependencies
lint = [
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "docstr-coverage>=2.3.0",
]

# All development dependencies combined
all = [
    "python-tabular[dev,docs,test,lint]"
]

[project.urls]
Homepage = "https://github.com/Curts0/PyTabular"
Documentation = "https://curts0.github.io/PyTabular/"
Repository = "https://github.com/Curts0/PyTabular"
"Bug Tracker" = "https://github.com/Curts0/PyTabular/issues"
Changelog = "https://github.com/Curts0/PyTabular/blob/main/CHANGELOG.md"

# Hatchling build configuration
[tool.hatch.build.targets.sdist]
include = [
    "/pytabular",
    "/README.md",
    "/LICENSE.txt",
]

[tool.hatch.build.targets.wheel]
packages = ["pytabular"]

[tool.hatch.build.targets.wheel.force-include]
"pytabular/dll" = "pytabular/dll"

# UV configuration
[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-xdist>=3.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.20.0",
    "mkdocs-gen-files>=0.5.0",
    "docstr-coverage>=2.3.0",
]

# Ruff configuration (replaces flake8)
[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "D",  # pydocstyle
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D107", # Missing docstring in __init__
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.per-file-ignores]
"test/*" = ["D"]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradually enable this
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "pythonnet",
    "clr",
    "System.*",
    "Microsoft.*",
    "xmltodict",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["test"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
addopts = [
    "-v",
    "--tb=short",
    "--strict-markers",
    "--disable-warnings",
    "--cov=pytabular",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "windows_only: marks tests that only run on Windows",
    "linux_only: marks tests that only run on Linux",
]

# Coverage configuration
[tool.coverage.run]
source = ["pytabular"]
branch = true
omit = [
    "*/test/*",
    "*/tests/*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"
